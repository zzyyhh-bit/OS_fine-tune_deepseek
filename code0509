%%capture

!pip install unsloth

!pip install unsloth -y && pip install --upgrade --no-cache-dir --no-deps git+https://github.com/unsloth/unslothai/unsloth.git

!pip install bitsandbytes unsloth_zoo

from unsloth import FastLanguageModel
import torch

max_seq_length = 2048
dtype = None
load_in_4bit = True

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name="unsloth/DeepSeek-R1-Distill-Llama-8B",
    max_seq_length=max_seq_length,
    dtype=dtype,
    load_in_4bit=load_in_4bit,
)

prompt_style = """以下是描述任务的指令，以及提供进一步上下文的输入。
请写出一个适当完成请求的回答。
在回答之前，请仔细思考问题，并创建一个逻辑连贯的思考过程，以确保回答准确无误。

###指令：
你是一位精通操作系统相关问题的人。
请回答以下有关操作系统的问题。

###问题：
{}


###回答：
<think>{}"""



question = "简单介绍一下操作系统"

FastLanguageModel.for_inference(model)

inputs = tokenizer([prompt_style.format(question,"")], return_tensors="pt").to("cuda")


outputs = model.generate(
    input_ids=inputs.input_ids,
    attention_mask=inputs.attention_mask,
    max_new_tokens=1200,
    use_cache=True,
)

response = tokenizer.batch_decode(outputs)

print(response[0])

train_prompt_style = """以下是描述任务的指令，以及提供进一步上下文的输入。
请写出一个适当完成请求的回答，并创建一个逻辑连贯的思考过程，以确保回答准确无误。

### 指令：
你是一位精通操作系统相关知识包括进程管理，文件系统，存储器管理等内容的专业的人。
请回答以下相关问题。

###问题：
{}

###回答：
<think>
{}
</think>
{}"""

EOS_TOKEN = tokenizer.eos_token
from datasets import load_dataset
dataset = load_dataset("WenKeLe/OperatingSys", 'default', split = "train[0:15]", trust_remote_code=True)

print(dataset.column_names)

def formatting_prompts_func(examples):
  inputs = examples["instruction"]
  cots = examples["input"]
  outputs = examples["output"]
  texts = []

  for input, cot, output, in zip(inputs, cots, outputs):
    text = train_prompt_style.format(input, cot, output) + EOS_TOKEN
    texts.append(text)
  return{
      "text":texts,
  }

dataset = dataset.map(formatting_prompts_func, batched = True)
dataset["text"][0]

FastLanguageModel.for_training(model)

model = FastLanguageModel.get_peft_model(
    model,
    r = 16,
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj", "gate_proj", "up_proj", "down_proj"],
    lora_alpha = 16,
    lora_dropout = 0,
    bias = "none",
    use_gradient_checkpointing = "unsloth",
    random_state = 3407,
    use_rslora = False,
    loftq_config = None,
)

from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    packing = False,
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        max_steps = 75,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none",
    )
)

trainer_stats = trainer.train()

print(question)

FastLanguageModel.for_inference(model)

inputs = tokenizer([prompt_style.format(question,"")], return_tensors="pt").to("cuda")

outputs = model.generate(
    input_ids = inputs.input_ids,
    attention_mask = inputs.attention_mask,
    max_new_tokens = 4000,
    use_cache = True,
)

response = tokenizer.batch_decode(outputs)

print(response[0])
